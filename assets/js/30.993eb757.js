(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{312:function(t,s,a){"use strict";a.r(s);var e=a(14),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"q-什么是mvcc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-什么是mvcc"}},[t._v("#")]),t._v(" q: 什么是MVCC?")]),t._v(" "),s("p",[t._v("MVCC (Multiversion Concurrency Control)，多版本并发控制。\n顾名思义，MVCC是通过数据行的多个版本管理来实现数据库的并发控制。这项技术使得在InnoDB的事务"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("隔离级别"),s("OutboundLink")],1),t._v("下执行一致性读操作有了保证。换言之，就是为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，这样在做查询的时候就不用等待另一个事务释放锁。")]),t._v(" "),s("blockquote",[s("p",[t._v("MySQL只有innodb存储引擎支持")])]),t._v(" "),s("p",[t._v("事务有 4 个隔离级别，可能存在三种并发问题：\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027140933.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("在MySQL中，默认的隔离级别是可重复读，可以解决脏读和不可重复读的问题，如果仅从定义的角度来看，它并不能解决幻读问题。如果想要解决幻读问题，就需要采用串行化的方式，也就是将隔离级别提升到最高，但这样一来就会大幅降低数据库的事务并发能力")]),t._v(" "),s("p",[t._v("MVCC可以不采用锁机制，而是通过乐观锁的方式来解决不可重复读和幻读问题!它可以在大多数情况下替代行级锁，降低系统的开销。\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027140958.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("注：MVCC 只有在 READ COMMITTD 、 REPEATABLE READ 这两种隔离级别下才有效")]),t._v(" "),s("p",[t._v("核心点在于 ReadView 的原理， READ COMMITTD 、 REPEATABLE READ 这两个隔离级别的一个很大不同就是生成ReadView的时机不同：")]),t._v(" "),s("ul",[s("li",[t._v("READ COMMITTD 在每一次进行普通SELECT操作前都会生成一个ReadView")]),t._v(" "),s("li",[t._v("REPEATABLE READ\n只在第一次进行普通SELECT操作前生成一个ReadView，之后的查询操作都重复使用这个ReadView就好了")])]),t._v(" "),s("blockquote",[s("p",[t._v("说明:之前说执行DELETE语句或者更新主键的UPDATE语句并不会立即把对应的记录完全从页面中删除，而是执行一个所谓的delete mark操作，相当于只是对记录打上了一个删除标志位，这主要就是为MVCC服务的。")])]),t._v(" "),s("p",[t._v("通过 MVCC 可以解决:")]),t._v(" "),s("ol",[s("li",[t._v("读写之间阻塞的问题。通过MVCC 可以让读写互相不阻塞，即读不阻塞写，写不阻塞读，这样就可以提升事务并发处理能力")]),t._v(" "),s("li",[t._v("降低了死锁的概率。这是因为MVCC采用了乐观锁的方式，读取数据时并不需要加锁，对于写操作，也只锁 定必要的行")]),t._v(" "),s("li",[t._v("解决快照读的问题。当查询数据库在某个时间点的快照时，只能看到这个时间点之前事务提交更新的结果，而不能看到这个时间点之后事务提交的更新结果")])]),t._v(" "),s("h2",{attrs:{id:"q-什么是快照读与当前读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-什么是快照读与当前读"}},[t._v("#")]),t._v(" q:什么是快照读与当前读？")]),t._v(" "),s("p",[t._v("MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使有读写冲突时，也能做到不加锁，非阻塞并发读，而这个读指的就是快照读,而非当前读。当前读实际上是一种加锁的操作，是悲观锁的实现。而MVCC本质是采用乐观锁思想的一种方式。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("快照读")])])]),t._v(" "),s("p",[t._v("快照读又叫一致性读，读取的是快照数据。不加锁的简单的 SELECT 都属于快照读，即不加锁的非阻塞读；比如这样：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于MVCC，它在很多情况下，避免了加锁操作，降低了开销。")]),t._v(" "),s("p",[t._v("既然是基于多版本，那么快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本。")]),t._v(" "),s("p",[t._v("快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("当前读")])])]),t._v(" "),s("p",[t._v("当前读读取的是记录的最新版本（最新数据，而不是历史版本的数据），读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。加锁的 SELECT，或者对数据进行增删改都会进行当前读。比如：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LOCK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("IN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SHARE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MODE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 共享锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 排他锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 排他锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 排他锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 排他锁")]),t._v("\n")])])]),s("h2",{attrs:{id:"q-什么是readview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-什么是readview"}},[t._v("#")]),t._v(" q: 什么是ReadView")]),t._v(" "),s("p",[t._v("MVCC 的实现依赖于：隐藏字段、Undo Log、Read View")]),t._v(" "),s("p",[t._v("在MVCC机制中，多个事务对同一个行记录进行更新会产生多个历史快照，这些历史快照保存在Undo Log里。如果一个事务想要查询这个行记录，需要读取哪个版本的行记录呢?这时就需要用到ReadView了，它解决了行的可见性问题")]),t._v(" "),s("p",[t._v('ReadView就是事务在使用MVCC机制进行快照读操作时产生的读视图。当事务启动时，会生成数据库系统当前的一个快照，InnoDB为每个事务构造了一个数组，用来记录并维护系统当前活跃事务的ID（“活跃"指的就是，启动了但还没提交)')]),t._v(" "),s("p",[t._v("对于不同的隔离级别：")]),t._v(" "),s("ul",[s("li",[t._v("使用READ UNCONNMITTED隔离级别的事务，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了。")]),t._v(" "),s("li",[t._v("使用SERIALIZABLE隔离级别的事务，InnoDB规定使用加锁的方式来访问记录。")]),t._v(" "),s("li",[t._v("使用 READ COMMITTED 和 REPEATABLE READ 隔离级别的事务，都必须保证读到 已经提交了的 事务修改过的记录。假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的，核心问题就是需要判断一下版本链中的哪个版本是当前事务可见的，这是ReadView要解决的主要问题。")])]),t._v(" "),s("p",[t._v("这个ReadView中主要包含4个比较重要的内容，分别如下：")]),t._v(" "),s("ol",[s("li",[t._v("creator_trx_id ，创建这个 Read View 的事务 ID。")])]),t._v(" "),s("blockquote",[s("p",[t._v("说明：只有在对表中的记录做改动时（执行INSERT、DELETE、UPDATE这些语句时）才会为事务分配事务id，否则在一个只读事务中的事务id值都默认为0。")])]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("trx_ids ，表示在生成ReadView时当前系统中活跃的读写事务的 事务id列表 。")]),t._v(" "),s("li",[t._v("up_limit_id ，活跃的事务中最小的事务 ID。")]),t._v(" "),s("li",[t._v("low_limit_id ，表示生成ReadView时系统中应该分配给下一个事务的 id 值。low_limit_id 是系统最大的事务id值，这里要注意是系统中的事务id，需要区别于正在活跃的事务ID。")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意：low_limit_id并不是trx_ids中的最大值，事务id是递增分配的。比如，现在有id为1，2，3这三个事务，之后id为3的事务提交了。那么一个新的读事务在生成ReadView时，trx_ids就包括1和2，up_limit_id的值就是1，low_limit_id的值就是4。")])]),t._v(" "),s("p",[s("strong",[t._v("举例:")]),t._v("\ntrx_ids为trx2、trx3、trx5和trx8的集合，系统的最大事务ID (low_limit_id)为trx8+1(如果之前没有其他的新增事务)，活跃的最小事务ID (up_limit_id)为trx2。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141026.png",alt:"image.png"}})]),t._v(" "),s("p",[s("strong",[t._v("ReadView的规则")])]),t._v(" "),s("p",[t._v("有了这个ReadView，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见。")]),t._v(" "),s("ul",[s("li",[t._v("如果被访问版本的trx_id属性值与ReadView中的 creator_trx_id 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。")]),t._v(" "),s("li",[t._v("如果被访问版本的trx_id属性值小于ReadView中的 up_limit_id值，表明生成该版本的事务在当前事务生成ReadView前已经提交，所以该版本可以被当前事务访问。")]),t._v(" "),s("li",[t._v("如果被访问版本的trx_id属性值大于或等于ReadView中的 low_limit_id值，表明生成该版本的事务在当前事务生成ReadView后才开启，所以该版本不可以被当前事务访问")]),t._v(" "),s("li",[t._v("如果被访问版本的trx_id属性值在ReadView的 up_limit_id 和 low_limit_id之间，那就需要判断一下trx_id属性值是不是在 trx_ids 列表中。\n1)如果在，说明创建ReadView时生成该版本的事务还是活跃的，该版本不可以被访问。\n2)如果不在，说明创建ReadView时生成该版本的事务已经被提交，该版本可以被访问。")])]),t._v(" "),s("h2",{attrs:{id:"q-mvcc整体操作流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-mvcc整体操作流程"}},[t._v("#")]),t._v(" q: MVCC整体操作流程?")]),t._v(" "),s("p",[t._v("了解了这些概念之后，来看下当查询一条记录的时候，系统如何通过MVCC找到它：")]),t._v(" "),s("ol",[s("li",[t._v("首先获取事务自己的版本号，也就是事务 ID；")]),t._v(" "),s("li",[t._v("获取 ReadView；")]),t._v(" "),s("li",[t._v("查询得到的数据，然后与 ReadView 中的事务版本号进行比较；")]),t._v(" "),s("li",[t._v("如果不符合 ReadView 规则，就需要从 Undo Log 中获取历史快照；")]),t._v(" "),s("li",[t._v("最后返回符合规则的数据。")])]),t._v(" "),s("p",[t._v("如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。")]),t._v(" "),s("blockquote",[s("p",[t._v("InnoDB中，MVCC是通过Undo Log + Read View进行数据读取，Undo Log保存了历史快照，而Read View规则帮我们判断当前版本的数据是否可见。")])]),t._v(" "),s("p",[t._v("在隔离级别为读已提交（Read Committed）时，一个事务中的每一次 SELECT 查询都会重新获取一次Read View。\n如表所示：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("事务")]),t._v(" "),s("th",[t._v("说明")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("begin;")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("select * from student where id >2;")]),t._v(" "),s("td",[t._v("获取一次Read View")])]),t._v(" "),s("tr",[s("td",[t._v("…")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("select * from student where id >2;")]),t._v(" "),s("td",[t._v("获取一次Read View")])]),t._v(" "),s("tr",[s("td",[t._v("commit;")]),t._v(" "),s("td")])])]),t._v(" "),s("blockquote",[s("p",[t._v("注意，此时同样的查询语句都会重新获取一次Read View，这时如果Read View 不同，就可能产生不可重复读或者幻读的情况。")])]),t._v(" "),s("p",[t._v("当隔离级别为可重复读的时候，就避免了不可重复读，这是因为一个事务只在第一次SELECT的时候会获取一次Read View，而后面所有的SELECT都会复用这个Read View，如下表所示:\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141047.png",alt:"image.png"}})]),t._v(" "),s("h2",{attrs:{id:"q-mvcc如何解决幻读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-mvcc如何解决幻读"}},[t._v("#")]),t._v(" q: MVCC如何解决幻读?")]),t._v(" "),s("p",[t._v("接下来说明InnoDB 是如何解决幻读的。")]),t._v(" "),s("p",[t._v("假设现在表 student 中只有一条数据，数据内容中，主键 id=1，隐藏的 trx_id=10，它的 undo log 如下图所示\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141059.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("假设现在有事务 A 和事务 B 并发执行， 事务 A 的事务 id 为 20 ， 事务 B 的事务 id 为 30 。")]),t._v(" "),s("p",[t._v("步骤1：事务 A 开始第一次查询数据，查询的 SQL 语句如下")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("p",[t._v("在开始查询之前，MySQL 会为事务 A 产生一个 ReadView，此时 ReadView 的内容如下： trx_ids=[20,30] ，up_limit_id=20 ， low_limit_id=31 ， creator_trx_id=20 。")]),t._v(" "),s("p",[t._v("由于此时表 student 中只有一条数据，且符合 where id>=1 条件，因此会查询出来。然后根据 ReadView机制，发现该行数据的trx_id=10，小于事务 A 的 ReadView 里 up_limit_id，这表示这条数据是事务 A 开启之前，其他事务就已经提交了的数据，因此事务 A 可以读取到。")]),t._v(" "),s("p",[t._v("结论：事务 A 的第一次查询，能读取到一条数据，id=1。")]),t._v(" "),s("p",[t._v("步骤2：接着事务 B(trx_id=30)，往表 student 中新插入两条数据，并提交事务")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'李四'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("insert")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("into")]),t._v(" student"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'王五'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v("\n")])])]),s("p",[t._v("此时表student 中就有三条数据了，对应的 undo 如下图所示：\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141114.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("步骤3：接着事务 A 开启第二次查询，根据可重复读隔离级别的规则，此时事务 A 并不会再重新生成ReadView。此时表 student 中的 3 条数据都满足 where id>=1 的条件，因此会先查出来。然后根据ReadView 机制，判断每条数据是不是都可以被事务 A 看到。")]),t._v(" "),s("p",[t._v("1）首先 id=1 的这条数据，前面已经说过了，可以被事务 A 看到。\n2）然后是 id=2 的数据，它的 trx_id=30，此时事务 A 发现，这个值处于 up_limit_id 和 low_limit_id 之间，因此还需要再判断 30 是否处于 trx_ids 数组内。由于事务 A 的 trx_ids=[20,30]，因此在数组内，这表示 id=2 的这条数据是与事务 A 在同一时刻启动的其他事务提交的，所以这条数据不能让事务 A 看到")]),t._v(" "),s("p",[t._v("3）同理，id=3 的这条数据，trx_id 也为 30，因此也不能被事务 A 看见\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141130.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("结论：最终事务 A 的第二次查询，只能查询出 id=1 的这条数据。这和事务 A 的第一次查询的结果是一样的，因此没有出现幻读现象，所以说在 MySQL 的可重复读隔离级别下，不存在幻读问题")])])}),[],!1,null,null,null);s.default=n.exports}}]);