(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{311:function(n,o,s){"use strict";s.r(o);var t=s(14),e=Object(t.a)({},(function(){var n=this,o=n._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("p",[o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/5dd3955a7726958cf87f6830c0911a9.jpg",alt:"5dd3955a7726958cf87f6830c0911a9.jpg"}}),n._v(" "),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20230802202548.png",alt:"image.png"}})]),n._v(" "),o("h2",{attrs:{id:"q-什么是事务"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-什么是事务"}},[n._v("#")]),n._v(" q: 什么是事务?")]),n._v(" "),o("p",[n._v("事务是一组操作，使数据从一种安全状态变为另一种安全状态")]),n._v(" "),o("blockquote",[o("p",[n._v("在MysQL中，只有InnoDB是支持事务的")])]),n._v(" "),o("h2",{attrs:{id:"q-事务的特性acid"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-事务的特性acid"}},[n._v("#")]),n._v(" q: 事务的特性ACID?")]),n._v(" "),o("p",[o("strong",[n._v("原子性")]),n._v("\n（Atomicity）\n原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。")]),n._v(" "),o("p",[o("strong",[n._v("一致性")]),n._v("\n（Consistency）\n事务必须使数据库从一个合法的（满足约束）的状态变换到另外一个合法的状态。\n事务完成时，必须使所有数据都保持一致状态\n或者可以理解为：多个事务并发执行的结果和串行执行的结果是一致的")]),n._v(" "),o("p",[o("strong",[n._v("隔离性")]),n._v("\n（Isolation）\n事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。")]),n._v(" "),o("p",[o("strong",[n._v("持久性")]),n._v("\n（Durability）\n持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。")]),n._v(" "),o("h2",{attrs:{id:"q-事务的四种特性到底是基于什么机制实现呢"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-事务的四种特性到底是基于什么机制实现呢"}},[n._v("#")]),n._v(" q:事务的四种特性到底是基于什么机制实现呢?")]),n._v(" "),o("ul",[o("li",[n._v("事务的隔离性由锁机制和MVCC实现")]),n._v(" "),o("li",[n._v("事务的原子性是由undo日志来保证")]),n._v(" "),o("li",[n._v("事务的持久性是由redo日志保证")]),n._v(" "),o("li",[n._v("事务的一致性是由隔离性和原子性和持久性一起实现")])]),n._v(" "),o("h2",{attrs:{id:"q-事务并发问题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-事务并发问题"}},[n._v("#")]),n._v(" q: 事务并发问题?")]),n._v(" "),o("p",[o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141201.png",alt:"image.png"}})]),n._v(" "),o("p",[o("strong",[n._v("写-写")])]),n._v(" "),o("ul",[o("li",[o("p",[n._v("丢失修改（脏写）")]),n._v(" "),o("blockquote",[o("p",[n._v("由于并发交替执行的操作，可能导致某一事物的修改被覆盖")])])])]),n._v(" "),o("p",[o("strong",[n._v("读-写")])]),n._v(" "),o("ul",[o("li",[o("p",[n._v("不能重复读：")]),n._v(" "),o("p",[n._v("是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。")]),n._v(" "),o("blockquote",[o("p",[n._v("在一个事务过程中，由于另一个事务"),o("strong",[n._v("修改")]),n._v("数据，造成该事务前后读取数据不一致")])])]),n._v(" "),o("li",[o("p",[n._v("幻读:")]),n._v(" "),o("p",[n._v("幻读指的是事务不是串行 发生时的一种现象，是事务 A读取了事务B已提交的新 增数据。例如第一个事务对 一个表的所有数据进行修 改，同时第二个事务向表中 插入一条新数据。那么操作 第一个事务的用户就发现表 中还有没有修改的数据行， 就像发生了幻觉一样。解决 幻读的方法是增加范围锁 （range lock）或者表锁。")]),n._v(" "),o("blockquote",[o("p",[n._v("在一个事务过程中，由于另一个事务"),o("strong",[n._v("插入或删除")]),n._v("记录，造成该事务前后读取总的记录数不一致")])])]),n._v(" "),o("li",[o("p",[n._v("脏读：")]),n._v(" "),o("p",[n._v("脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。")]),n._v(" "),o("blockquote",[o("p",[n._v("一个事务读取了另一个事务尚未提交的数据")])])])]),n._v(" "),o("h2",{attrs:{id:"q-事务有哪些隔离级别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-事务有哪些隔离级别"}},[n._v("#")]),n._v(" q:事务有哪些隔离级别？")]),n._v(" "),o("p",[n._v("事务的隔离机制就是解决读写冲突的一个手段。")]),n._v(" "),o("p",[o("img",{attrs:{src:"http://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20230301164339.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("不论是哪种隔离级别，都不允许脏写的情况发生。 不同的隔离级别有不同的现象，并有不同的锁和并发机制，隔离级别越高，数据库的并发性能就越差")]),n._v(" "),o("p",[o("strong",[n._v("读未提交")]),n._v("\n存在问题：")]),n._v(" "),o("ul",[o("li",[n._v("脏写")]),n._v(" "),o("li",[n._v("脏读")]),n._v(" "),o("li",[n._v("不可重复读")]),n._v(" "),o("li",[n._v("幻读")])]),n._v(" "),o("p",[n._v("原因解释：")]),n._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI5MzQ2MDg4Nw==&mid=2247483812&idx=1&sn=dc24a2c69481b27b08da6199be654e07&chksm=ec708f5cdb07064a1f00f12a9fbfa5e278b0721d7d766c0c189d9e05250a1255557313a63a4b&cur_album_id=1445831294184767489&scene=190#rd",target:"_blank",rel:"noopener noreferrer"}},[n._v("图解脏写、脏读、不可重复读、幻读 (qq.com)"),o("OutboundLink")],1)])]),n._v(" "),o("p",[o("strong",[n._v("读已提交")]),n._v("\n解决问题：")]),n._v(" "),o("ul",[o("li",[n._v("脏写")]),n._v(" "),o("li",[n._v("脏读")])]),n._v(" "),o("p",[n._v("存在问题")]),n._v(" "),o("ul",[o("li",[n._v("不可重复读")]),n._v(" "),o("li",[n._v("幻读")])]),n._v(" "),o("p",[o("strong",[n._v("可重复读")]),n._v("\n（mysql默认）\n解决问题：")]),n._v(" "),o("ul",[o("li",[n._v("脏写")]),n._v(" "),o("li",[n._v("脏读")]),n._v(" "),o("li",[n._v("不可重复读")])]),n._v(" "),o("p",[n._v("存在问题")]),n._v(" "),o("ul",[o("li",[n._v("幻读")])]),n._v(" "),o("p",[o("strong",[n._v("串行化")]),n._v("\n解决问题")]),n._v(" "),o("ul",[o("li",[n._v("脏写")]),n._v(" "),o("li",[n._v("脏读")]),n._v(" "),o("li",[n._v("不可重复读")]),n._v(" "),o("li",[n._v("幻读")])]),n._v(" "),o("h2",{attrs:{id:"q-mysql-undo日志和redo日志比较"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-mysql-undo日志和redo日志比较"}},[n._v("#")]),n._v(" q:Mysql undo日志和redo日志比较？")]),n._v(" "),o("p",[n._v("1）REDO LOG称为重做日志，提供再写入操作，恢复提交事务修改的页操作，用来保证事务的持久性。\n2）UNDO LOG称为回滚日志，回滚行记录到某个特定版本，用来保证事务的原子性、一致性。")]),n._v(" "),o("p",[n._v("有的DBA或许会认为UNDO是REDO的逆过程，其实不然。REDO和UNDO都可以视为是一种恢复操作。但是:")]),n._v(" "),o("ul",[o("li",[o("p",[n._v('redo log：是存储引擎层(innodb)生成的日志，记录的是"物理级别"上的页修改操作，比如页号xxx、偏移量yyy写入了’zzz’数据。主要为了保证数据的可靠性')])]),n._v(" "),o("li",[o("p",[n._v("undo log:是存储引擎层(innodb)生成的日志，记录的是逻辑操作日志，比如对某一行数据进行了INSERT语句操作，那么undo log就记录一条与之相反的DELETE操作。主要用于事务的回滚(undo log 记录的是每个修改操作的逆操作)和一致性非锁定读(undo log回滚行记录到某种特定的版本–MVCC，即多版本并发控制）")])])]),n._v(" "),o("h2",{attrs:{id:"q-为什么需要redo日志"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-为什么需要redo日志"}},[n._v("#")]),n._v(" q: 为什么需要REDO日志")]),n._v(" "),o("p",[n._v("InnoDB存储引擎是以页为单位来管理存储空间的。在真正访问页面之前，需要把在磁盘上的页缓存到内存中的Buffer Pool之后才可以访问。所有的变更都必须先更新缓冲池中的数据，然后缓冲池中的脏页会以一定的频率被刷入磁盘（ checkPoint机制），通过缓冲池来优化CPU和磁盘之间的鸿沟，这样就可以保证整体的性能不会下降太快。")]),n._v(" "),o("p",[n._v("一方面，缓冲池可以帮助我们消除CPU和磁盘之间的鸿沟，checkpoint机制可以保证数据的最终落盘，然而由于checkpoint 并不是每次变更的时候就触发 的，而是master线程隔一段时间去处理的。所以最坏的情况就是事务提交后，刚写完缓冲池，数据库宕机了，那么这段数据就是丢失的，无法恢复。")]),n._v(" "),o("p",[n._v("另一方面，事务包含 持久性 的特性，就是说对于一个已经提交的事务，在事务提交后即使系统发生了崩溃，这个事务对数据库中所做的更改也不能丢失。")]),n._v(" "),o("p",[n._v("那么如何保证这个持久性呢？ 一个简单的做法 ：在事务提交完成之前把该事务所修改的所有页面都刷新到磁盘，但是这个简单粗暴的做法有些问题：")]),n._v(" "),o("ul",[o("li",[o("strong",[n._v("修改量与刷新磁盘工作量严重不成比例")]),n._v("\n有时候仅仅修改了某个页面中的一个字节，但是我们知道在InnoDB中是以页为单位来进行磁盘IO的，也就是说在该事务提交时不得不将一个完整的页面从内存中刷新到慈盘，我们又知道一个页面默认是16KB大小，只修改一个字节就要刷新16KB的数据到磁盘上显然是太小题大做了。")]),n._v(" "),o("li",[o("strong",[n._v("随机IO刷新较慢")]),n._v("\n一个事务可能包含很多语句，即使是一条语句也可能修改许多页面，假如该事务修改的这些页面可能并不相邻，这就意味着在将某个事务修改的Buffer Pool中的页面刷新到磁盘时，需要进行很多的随机IO，随机IO比顺序IO要慢，尤其对于传统的机械硬盘来说。")])]),n._v(" "),o("p",[n._v("另一个解决的思路∶我们只是想让已经提交了的事务对数据库中数据所做的修改永久生效，即使后来系统崩溃，在重启后也能把这种修改恢复出来。所以其实没有必要在每次事务提交时就把该事务在内存中修改过的全部页面刷新到磁盘，只需要把修改了哪些东西记录一下就好。比如，某个事务将系统表空间中第10号页面中偏移量为100处的值更新为2。")]),n._v(" "),o("p",[n._v("InnoDB引擎的事务采用了WAL技术（Write-Ahead Logging )，这种技术的思想就是先写日志，再写磁盘，只有日志写入成功，才算事务提交成功，这里的日志就是redo log。当发生宕机且数据未刷到磁盘的时候，可以通i过redo log来恢复，保证ACID中的D，\n这就是redo log的作用。\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141222.png",alt:"image.png"}})]),n._v(" "),o("blockquote",[o("p",[n._v("小贴士：每条 redo 记录由“表空间号+数据页号+偏移量+修改数据长度+具体修改的数据”组成")])]),n._v(" "),o("p",[n._v("REDO日志的好处、特点")]),n._v(" "),o("p",[o("strong",[n._v("1. 好处")])]),n._v(" "),o("ul",[o("li",[n._v("redo日志降低了刷盘频率")]),n._v(" "),o("li",[n._v("redo日志占用的空间非常小")])]),n._v(" "),o("p",[o("strong",[n._v("2.特点")])]),n._v(" "),o("ul",[o("li",[n._v("redo日志是顺序写入磁盘的\n在执行事务的过程中，每执行一条语句，就可能产生若干条redo日志，这些日志是按照产生的l顺序写入磁盘的，也就是使用顺序IO，效率比随机lO快。")]),n._v(" "),o("li",[n._v("事务执行过程中，redo log不断记录\nredo log跟bin log的区别,redo log是存储引擎层产生的，而bin log是数据库层产生的。假设一个事务，对表做10万行的记录插入，在这个过程中，一直不断的往redo log顺序记录，而bin log不会记录，直到这个事务提交，才会一次写入到bin log文件中")])]),n._v(" "),o("h2",{attrs:{id:"q-redo-log的整体流程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-redo-log的整体流程"}},[n._v("#")]),n._v(" q: redo log的整体流程？")]),n._v(" "),o("p",[n._v("以一个更新事务为例，redo log 流转过程，如下图所示：\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141245.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("第1步：先将原始数据从磁盘中读入内存中来，修改数据的内存拷贝\n第2步：生成一条重做日志并写入redo log buffer，记录的是数据被修改后的值\n第3步：当事务commit时，将redo log buffer中的内容刷新到 redo log file，对 redo log file采用追加写的方式\n第4步：定期将内存中修改的数据刷新到磁盘中")]),n._v(" "),o("p",[n._v("刷盘策略\ninnodb_flush_log_at_trx_commit 参数，该参数控制 commit提交事务时，如何将 redo log buffer 中的日志刷新到 redo log file 中。它支持三种策略：")]),n._v(" "),o("ul",[o("li",[o("p",[n._v("设置为0 ：表示每次事务提交时不进行刷盘操作。（系统默认master thread每隔1s进行一次重做日志的同步）")])]),n._v(" "),o("li",[o("p",[n._v("设置为1 ：表示每次事务提交时都将进行同步，刷盘操作（ 默认值 ）")])]),n._v(" "),o("li",[o("p",[n._v("设置为2 ：表示每次事务提交时都只把 redo log buffer 内容写入 page cache，不进行同步。由os自己决定什么时候同步到磁盘文件。\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20230702194958.png",alt:"image.png"}})])])]),n._v(" "),o("p",[n._v("另外，InnoDB存储引擎有一个后台线程，每隔1秒，就会把 redo log buffer 中的内容写到文件系统缓存( page cache ) ，然后调用刷盘操作。")]),n._v(" "),o("h2",{attrs:{id:"q-redo-file的书写策略"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-redo-file的书写策略"}},[n._v("#")]),n._v(" q: redo file的书写策略？")]),n._v(" "),o("p",[n._v("多个redo file组成一个文件组，在一个组内循环写入\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20230820122824.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("有两个指针，分别记录写入的和已经刷到磁盘的位置\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20230820122902.png",alt:"image.png"}}),n._v("\n如果 "),o("code",[n._v("write pos")]),n._v(" 追上 "),o("code",[n._v("checkpoint")]),n._v(" ，表示"),o("strong",[n._v("日志文件组")]),n._v("满了，这时候不能再写入新的 "),o("code",[n._v("redo log")]),n._v(" 记录，"),o("code",[n._v("MySQL")]),n._v(" 得停下来，清空一些记录，把 "),o("code",[n._v("checkpoint")]),n._v(" 推进一下。")]),n._v(" "),o("h2",{attrs:{id:"q-为什么要undo日志"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-为什么要undo日志"}},[n._v("#")]),n._v(" q: 为什么要Undo日志？")]),n._v(" "),o("p",[n._v("redo log是事务持久性的保证，undo log是事务原子性的保证。在事务中 更新数据 的 前置操作 其实是要先写入一个 undo log 。")]),n._v(" "),o("p",[n._v("事务需要保证 原子性 ，也就是事务中的操作要么全部完成，要么什么也不做。但有时候事务执行到一半会出现一些情况，比如：")]),n._v(" "),o("ul",[o("li",[n._v("情况一：事务执行过程中可能遇到各种错误，比如 服务器本身的错误 ， 操作系统错误 ，甚至是突然 断电 导致的错误。")]),n._v(" "),o("li",[n._v("情况二：程序员可以在事务执行过程中手动输入 ROLLBACK 语句结束当前事务的执行。")])]),n._v(" "),o("p",[n._v("以上情况出现，需要把数据改回原先的样子，这个过程称之为回滚 ，这样就可以造成一个假象：这个事务看起来什么都没做，所以符合原子性要求")]),n._v(" "),o("p",[n._v('每当我们要对一条记录做改动时(这里的改动可以指INSERT、DELETE、UPDATE ），都需要"留一手"—>把回滚时所需的东西记下来。比如:')]),n._v(" "),o("ul",[o("li",[n._v("你插入一条记录时，至少要把这条记录的主键值记下来，之后回滚的时候只需要把这个主键值对应的记录删除就好了（对于每个INSERT，\nInnoDB存储引擎会完成一个DELETE)")]),n._v(" "),o("li",[n._v("你删除了一条记录，至少要把这条记录中的内容都记下来，这样之后回滚时再把由这些内容组成的记录插入到表中就好了。(对于每个DELETE，InnoDB存储引擎会执行一个INSERT)")]),n._v(" "),o("li",[n._v("你修改了一条记录，至少要把修改这条记录前的旧值都记录下来，这样之后回滚时再把这条记录更新为旧值就好了。(对于每个UPDATE，InnoDB存储引擎会执行一个相反的UPDATE，将修改前的行放回去)")])]),n._v(" "),o("p",[n._v("MySQL把这些为了回滚而记录的这些内容称之为撒销日志或者回滚日志(即undo log)。注意，由于查询操作( SELECT）并不会修改任何用户记录，所以在查询操作执行时，并不需要记录相应的undo日志")]),n._v(" "),o("blockquote",[o("p",[n._v("此外，undo log 会产生redo log，也就是undo log的产生会伴随着redo log的产生，这是因为undo log也需要持久性的保护")])]),n._v(" "),o("p",[o("strong",[n._v("Undo日志的作用")]),n._v(":")]),n._v(" "),o("ul",[o("li",[o("h5",{attrs:{id:"作用1-回滚数据"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#作用1-回滚数据"}},[n._v("#")]),n._v(" 作用1：回滚数据")])])]),n._v(" "),o("p",[n._v("用户对undo日志可能有误解:undo用于将数据库物理地恢复到执行语句或事务之前的样子。但事实并非如此。undo是逻辑日志，因此只是将数据库逻辑地恢复到原来的样子。所有修改都被逻辑地取消了，但是数据结构和页本身在回滚之后可能大不相同。")]),n._v(" "),o("p",[n._v("这是因为在多用户并发系统中，可能会有数十、数百甚至数千个并发事务。数据库的主要任务就是协调对数据记录的并发访问。比如，一个事务在修改当前一个页中某几条记录，同时还有别的事务在对同一个页中另几条记录进行修改。因此，不能将一个页回滚到事务开始的样子，因为这样会影响其他事务正在进行的工作。")]),n._v(" "),o("ul",[o("li",[o("h5",{attrs:{id:"作用2-mvcc"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#作用2-mvcc"}},[n._v("#")]),n._v(" 作用2：MVCC")])])]),n._v(" "),o("p",[n._v("undo的另一个作用是MVCC，即在InnoDB存储引擎中MVCC的实现是通过undo来完成。当用户读取一行记录时，若该记录已经被其他事务占用，当前事务可以通过undo读取之前的行版本信息，以此实现非锁定读取")]),n._v(" "),o("p",[n._v("事务提交后并不能马上删除undo log及undo log所在的页。这是因为可能还有其他事务需要通过undo log来得到行记录之前的版本。故事务提交时将undo log放入一个链表中，是否可以最终删除undo log及undo log所在页由purge线程来判断")]),n._v(" "),o("h2",{attrs:{id:"q-undo的类型"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-undo的类型"}},[n._v("#")]),n._v(" q: undo的类型?")]),n._v(" "),o("p",[n._v("在InnoDB存储引擎中，undo log分为：")]),n._v(" "),o("ul",[o("li",[n._v("insert undo log\ninsert undo log是指在insert操作中产生的undo log。因为insert操作的记录，只对事务本身可见，对其他事务不可见(这是事务隔离性的要求)，故该undo log可以在事务提交后直接删除。不需要进行purge操作")]),n._v(" "),o("li",[n._v("update undo log\nupdate undo log记录的是对delete和update操作产生的undo log，该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除")])]),n._v(" "),o("h2",{attrs:{id:"q-undo-log的生成过程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-undo-log的生成过程"}},[n._v("#")]),n._v(" q: undo log的生成过程?")]),n._v(" "),o("p",[o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141312.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("以下是undo+redo事务的简化i过程\n假设有2个数值，分别为A=1和B=2，然后将A修改为3,B修改为4")]),n._v(" "),o("div",{staticClass:"language-sql extra-class"},[o("pre",{pre:!0,attrs:{class:"language-sql"}},[o("code",[n._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("start")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("transaction")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("．记录A"),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("到undo log"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n "),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("update")]),n._v(" A "),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("4.")]),n._v("记录A"),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("3")]),n._v(" 到redo log"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("5")]),n._v("．记录B"),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("到undo log"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n "),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("update")]),n._v(" B "),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("4")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("7.")]),n._v("记录B "),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("4")]),n._v("到redo log"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("8")]),n._v("．将redo log刷新到磁盘\n "),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("-")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("commit")]),n._v("\n\n")])])]),o("ul",[o("li",[n._v("在1-8步骤的任意一步系统宕机，事务未提交，该事务就不会对磁盘上的数据做任何影响")]),n._v(" "),o("li",[n._v("如果在8-9之间宕机，恢复之后可以选择回滚，也可以选择继续完成事务提交，因为此时redo log已经持久化")]),n._v(" "),o("li",[n._v("若在9之后系统宕机，内存映射中变更的数据还来不及刷回磁盘，那么系统恢复之后，可以根据redo log把数据刷回磁盘")])]),n._v(" "),o("p",[n._v("只有Buffer Pool的流程：\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141330.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("有了Redo Log和Undo Log之后：\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141347.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("在更新Buffer Pool中的数据之前，需要先将该数据事务开始之前的状态写入Undo Log中。假设更新到一半出错了，就可以通过Undo Log来回滚到事务开始前。")]),n._v(" "),o("p",[n._v("对于InnoDB引擎来说，每个行记录除了记录本身的数据之外，还有几个隐藏的列:")]),n._v(" "),o("ul",[o("li",[o("p",[n._v("DB_ROW_ID:如果没有为表显式的定义主键，并且表中也没有定义唯一索引，那么InnoDB会自动为表添加一个row_id的隐藏列作为主键")])]),n._v(" "),o("li",[o("p",[n._v("DB_TRX_ID:每个事务都会分配一个事务ID，当对某条记录发生变更时，就会将这个事务的事务ID写入trx_id中")])]),n._v(" "),o("li",[o("p",[n._v("DB_ROLL_PTR;回滚指针，本质上就是指句undo log的指针\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141406.png",alt:"image.png"}})]),n._v(" "),o("p",[o("code",[n._v("当我们执行INSERT时：")])])])]),n._v(" "),o("div",{staticClass:"language-sql extra-class"},[o("pre",{pre:!0,attrs:{class:"language-sql"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("begin")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("INSERT")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("INTO")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("user")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("name"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("VALUES")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[n._v('"tom"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("12")]),n._v("\n")])])]),o("p",[n._v("插入的数据都会生成一条insert undo log，并且数据的回滚指针会指向它。undo log会记录undo log的序号、插入主键的列和值…。那么在进行rollback的时候，通过主键直接把对应的数据删除即可")]),n._v(" "),o("p",[o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141425.png",alt:"image.png"}})]),n._v(" "),o("p",[o("code",[n._v("当我们执行UPDATE时：")]),n._v("\n对于更新的操作会产生update undo log，并且会分更新主键的和不更新主键的，假设现在执行:")]),n._v(" "),o("div",{staticClass:"language-sql extra-class"},[o("pre",{pre:!0,attrs:{class:"language-sql"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("UPDATE")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("user")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("SET")]),n._v(" name"),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[n._v('"Sun"')]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("WHERE")]),n._v(" id"),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n")])])]),o("p",[o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141730.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("这时会把老的记录写入新的undo log，让回滚指针指向新的undo log，它的undo no是1，并且新的undo log会指向老的undo log (undo no=0) .\n假设现在执行:")]),n._v(" "),o("div",{staticClass:"language-sql extra-class"},[o("pre",{pre:!0,attrs:{class:"language-sql"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("UPDATE")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("user")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("SET")]),n._v(" id"),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("WHERE")]),n._v(" id"),o("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),o("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),n._v("\n")])])]),o("p",[o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141712.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("对于更新主键的操作，会先把原来的数据deletemark标识打开，这时并没有真正的删除数据，真正的删除会交给清理线程去判断，然后在后面插入一条新的数据，新的数据也会产生undo log，并且undo log的序号会递增")]),n._v(" "),o("p",[n._v("可以发现每次对数据的变更都会产生一个undo log，当一条记录被变更多次时，那么就会产生多条undo log,undo log记录的是变更前的日志，并且每个undo log的序号是递增的，那么当要回滚的时候，按照序号依次向前推，就可以找到原始数据")]),n._v(" "),o("h2",{attrs:{id:"q-undo-log是如何回滚的"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-undo-log是如何回滚的"}},[n._v("#")]),n._v(" q: undo log是如何回滚的?")]),n._v(" "),o("p",[n._v("以上面的例子来说，假设执行rollback，那么对应的流程应该是这样：")]),n._v(" "),o("ol",[o("li",[n._v("通过undo no=3的日志把id=2的数据删除")]),n._v(" "),o("li",[n._v("通过undo no=2的日志把id=1的数据的deletemark还原成0")]),n._v(" "),o("li",[n._v("通过undo no=1的日志把id=1的数据的name还原成Tom")]),n._v(" "),o("li",[n._v("通过undo no=0的日志把id=1的数据删除")])]),n._v(" "),o("h2",{attrs:{id:"q-undo-log的删除机制"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-undo-log的删除机制"}},[n._v("#")]),n._v(" q: undo log的删除机制？")]),n._v(" "),o("ul",[o("li",[n._v("针对于insert undo log\n因为insert操作的记录，只对事务本身可见，对其他事务不可见。故该undo log可以在事务提交后直接删\n除，不需要进行purge操作。")]),n._v(" "),o("li",[n._v("针对于update undo log\n该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。")])]),n._v(" "),o("blockquote",[o("p",[n._v('补充:\npurge线程两个主要作用是:清理undo页和清除page里面带有Delete_Bit标识的数据行。在InnoDB中，事务中的Delete操作实际上并不是真正的删除掉数据行，而是一种Delete Mark操作，在记录上标识Delete_Bit，而不删除记录。是一种"假删除";只是做了个标记，真正的删除工作需要后台purge线程去完成\n'),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20230805220520.png",alt:"image.png"}})])]),n._v(" "),o("h2",{attrs:{id:"q-mysql还有哪些日志"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-mysql还有哪些日志"}},[n._v("#")]),n._v(" q: mysql还有哪些日志？")]),n._v(" "),o("p",[o("code",[n._v("慢查询日志:")]),n._v("记录所有执行时间超过long_query_time的所有查询，方便对查询进行优化。\n"),o("code",[n._v("通用查询日志:")]),n._v("记录所有连接的起始时间和终止时间，以及连接发送给数据库服务器的所有指令，对复原操作的实际场景、发现问题，甚至是对数据库操作的审计都有很大的帮助。\n"),o("code",[n._v("错误日志:")]),n._v("记录MySQL服务的启动、运行或停止MySQL服务时出现的问题，方便我们了解服务器的状态，从而从而对服务器进行维护。\n"),o("code",[n._v("二进制日志:")]),n._v("记录所有更改数据的语句，可以用于主从服务器之间的数据同步，以及服务器遇到故障时数据的无损失恢复。\n"),o("code",[n._v("中继日志:")]),n._v("用于主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。从服务器通过读取中继日志的内容，来同步主服务器上的操作。\n"),o("code",[n._v("数据定义语句日志:")]),n._v("记录数据定义语句执行的元数据操作。除二进制日志外，其他日志都是文本文件。默认情况下，所有日志创建于MySQL数据目录中。")]),n._v(" "),o("h2",{attrs:{id:"q-什么是二进制日志-bin-log"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-什么是二进制日志-bin-log"}},[n._v("#")]),n._v(" q: 什么是二进制日志(bin log)")]),n._v(" "),o("p",[n._v("binlog可以说是MySQL中比较 重要 的日志了，在日常开发及运维过程中，经常会遇到。")]),n._v(" "),o("p",[n._v("binlog即binary log，二进制日志文件，也叫作变更日志（update log）。它记录了数据库所有执行的DDL 和 DML 等数据库更新事件的语句，但是不包含没有修改任何数据的语句（如数据查询语句select、show等）。")]),n._v(" "),o("p",[n._v("它以事件形式记录并保存在二进制文件中。通过这些信息，我们可以再现数据更新操作的全过程。")]),n._v(" "),o("p",[n._v("如果想要记录所有语句（例如，为了识别有问题的查询)，需要使用通用查询日志。")]),n._v(" "),o("p",[o("strong",[n._v("binlog主要应用场景:")])]),n._v(" "),o("ul",[o("li",[n._v("一是用于数据恢复，如果MySQL数据库意外停止，可以通过二进制日志文件来查看用户执行了哪些操作，对数据库服务器文件做了哪些修改，然后根据二进制日志文件中的记录来恢复数据库服务器。")]),n._v(" "),o("li",[n._v("二是用于数据复制，由于日志的延续性和时效性，master把它的二进制日志传递给slaves来达到master-slave数据—致的目的。")])]),n._v(" "),o("p",[o("strong",[n._v("binlog主要应用场景：")])]),n._v(" "),o("ul",[o("li",[n._v("一是用于数据恢复")]),n._v(" "),o("li",[n._v("二是用于数据复制")])]),n._v(" "),o("p",[n._v("可以说MySQL数据库的数据备份、主备、主主、主从都离不开binlog，需要依靠binlog来同步数据，保证数据—致性。\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141445.png",alt:"image.png"}})]),n._v(" "),o("h2",{attrs:{id:"q-binlog的写入机制"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-binlog的写入机制"}},[n._v("#")]),n._v(" q: binlog的写入机制？")]),n._v(" "),o("p",[n._v("binlog的写入时机也非常简单，事务执行过程中，先把日志写到 binlog cache ，事务提交的时候，再把binlog cache写到binlog文件中。因为一个事务的binlog不能被拆开，无论这个事务多大，也要确保一次性写入，所以系统会给每个线程分配一个块内存作为binlog cache。")]),n._v(" "),o("p",[n._v("我们可以通过binlog_cache_size参数控制单个线程binlog cache大小，如果存储内容超过了这个参数，就要暂存到磁盘(Swap)。binlog日志刷盘流程如下:\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141650.png",alt:"image.png"}})]),n._v(" "),o("blockquote",[o("p",[n._v("上图的write，是指把日志写入到文件系统的page cache，并没有把数据持久化到磁盘，所以速度比较快\n上图的 fsync，才是将数据持久化到磁盘的操作")])]),n._v(" "),o("p",[n._v("write和fsync的时机，可以由参数 sync_binlog 控制，默认是 0 。为0的时候，表示每次提交事务都只write，由系统自行判断什么时候执行fsync。虽然性能得到提升，但是机器宕机，page cache里面的 binglog 会丢失。如下图：\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141629.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("为了安全起见，可以设置为 1 ，表示每次提交事务都会执行fsync，就如同redo log 刷盘流程一样。")]),n._v(" "),o("p",[n._v("最后还有一种折中方式，可以设置为N(N>1)，表示每次提交事务都write，但累积N个事务后才fsync。\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141612.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("在出现IO瓶颈的场景里，将sync_binlog设置成一个比较大的值，可以提升性能。同样的，如果机器宕机，会丢失最近N个事务的binlog日志。")]),n._v(" "),o("h2",{attrs:{id:"q-binlog与redolog对比"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-binlog与redolog对比"}},[n._v("#")]),n._v(" q: binlog与redolog对比?")]),n._v(" "),o("ul",[o("li",[n._v("redo log 它是 物理日志 ，记录内容是“在某个数据页上做了什么修改”，属于 InnoDB 存储引擎层产生的。")]),n._v(" "),o("li",[n._v("而 binlog 是逻辑日志 ，记录内容是语句的原始逻辑，类似于“给 ID=2 这一行的 c 字段加 1”，属于 MySQL Server层。")])]),n._v(" "),o("p",[n._v("虽然它们都属于持久化的保证，但是侧重点不同。")]),n._v(" "),o("ul",[o("li",[n._v("redo log让InnoDB存储引擎拥有了崩溃恢复能力")]),n._v(" "),o("li",[n._v("binlog 保证了MySQL集群架构的数据一致性。")])]),n._v(" "),o("h2",{attrs:{id:"q-如何理解两阶段提交"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#q-如何理解两阶段提交"}},[n._v("#")]),n._v(" q: 如何理解两阶段提交？")]),n._v(" "),o("p",[n._v("redo log与binlog不一致，怎么办？")]),n._v(" "),o("p",[n._v("在执行更新语句过程，会记录redo log与binlog两块日志，以基本的事务为单位，redo log在事务执行过程中可以不断写入，而binlog只有在提交事务时才写入，所以redo log与binlog的 写入时机 不一样")]),n._v(" "),o("p",[n._v("为了解决两份日志之间的逻辑一致问题，InnoDB存储引擎使用两阶段提交方案。原理很简单，将redo log的写入拆成了两个步骤prepare和commit，这就是两阶段提交。\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141554.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("使用两阶段提交后，写入binlog时发生异常也不会有影响，因为MySQL根据redo log日志恢复数据时，发现redolog还处于prepare阶段，并且没有对应binlog日志，就会回滚该事务。\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141538.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("另一个场景，redo log设置commit阶段发生异常，那会不会回滚事务呢？\n"),o("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027141523.png",alt:"image.png"}})]),n._v(" "),o("p",[n._v("并不会回滚事务，它会执行上图框住的逻辑，虽然redo log是处于prepare阶段，但是能通过事务id找到对应的binlog日志，所以MySQL认为是完整的，就会提交事务恢复数据。")])])}),[],!1,null,null,null);o.default=e.exports}}]);