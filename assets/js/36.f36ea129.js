(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{317:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"q-select的执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-select的执行过程"}},[t._v("#")]),t._v(" q: SELECT的执行过程?")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#方式1：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" 多表的连接条件\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),t._v(" 不包含组函数的过滤条件\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" 包含组函数的过滤条件\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#方式2：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" 多表的连接条件\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" 不包含组函数的过滤条件\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("AND")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" 不包含组函数的过滤条件\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" 包含组函数的过滤条件\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ASC")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#其中：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（1）from：从哪些表中筛选")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（2）on：关联多表查询时，去除笛卡尔积")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（3）where：从表中筛选的条件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（4）group by：分组依据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（5）having：在统计结果中再次筛选")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（6）order by：排序")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（7）limit：分页")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20230623225352.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("SELECT执行顺序")]),t._v(" "),s("p",[t._v("需要记住 SELECT 查询时的两个顺序：")]),t._v(" "),s("ol",[s("li",[t._v("关键字的顺序是不能颠倒的：")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("SELECT 语句的执行顺序（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" 的字段 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027140708.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("比如写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DISTINCT")]),t._v(" player_id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" player_name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("count")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺序 5")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" player "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("JOIN")]),t._v(" team "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" player"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" team"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team_id "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺序 1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" height "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.80")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺序 2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GROUP")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" player"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("team_id "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺序 3")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("HAVING")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺序 4")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ORDER")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DESC")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺序 6")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 顺序 7")]),t._v("\n")])])]),s("p",[t._v("在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个 虚拟表 ，然后将这个虚拟表传入下一个步骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#4. SQL底层执行原理")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#4.1 SELECT 语句的完整结构")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n#sql92语法：\nSELECT ....,....,....(存在聚合函数)\nFROM ...,....,....\nWHERE 多表的连接条件 AND 不包含聚合函数的过滤条件\nGROUP BY ...,....\nHAVING 包含聚合函数的过滤条件\nORDER BY ....,...(ASC / DESC )\nLIMIT ...,....\n\n\n#sql99语法：\nSELECT ....,....,....(存在聚合函数)\nFROM ... (LEFT / RIGHT)JOIN ....ON 多表的连接条件 \n(LEFT / RIGHT)JOIN ... ON ....\nWHERE 不包含聚合函数的过滤条件\nGROUP BY ...,....\nHAVING 包含聚合函数的过滤条件\nORDER BY ....,...(ASC / DESC )\nLIMIT ...,....\n*/")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#4.2 SQL语句的执行过程：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#FROM ...,...-> ON -> (LEFT/RIGNT  JOIN) -> WHERE -> GROUP BY -> HAVING -> SELECT -> DISTINCT -> ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ORDER BY -> LIMIT")]),t._v("\n")])])]),s("h3",{attrs:{id:"q-sql-语句交给mysql执行的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-sql-语句交给mysql执行的过程"}},[t._v("#")]),t._v(" q: sql 语句交给mysql执行的过程？")]),t._v(" "),s("p",[t._v("那服务器进程对客户端进程发送的请求做了什么处理，才能产生最后的处理结果呢？这里以查询请求为例展示：\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027140737.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("下面具体展开看一下（数字标号展示了5.7查询的顺序）：\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027140801.png",alt:"image.png"}})]),t._v(" "),s("p",[s("strong",[t._v("Connectors:")]),t._v(" MySQL服务器之外的客户端程序，和具体编程语言相关的内容\n"),s("strong",[t._v("Management Service &Utilities–>基础服务组件：")]),t._v(" MySQL服务器的基础服务组件\n"),s("strong",[t._v("Connection Pool --\x3e连接池")]),t._v("： 提供了多个用于客户端和服务器端进行交互的线程，这些线程使用完后交还到"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E8%BF%9E%E6%8E%A5%E6%B1%A0&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("连接池"),s("OutboundLink")],1),t._v("，供其他客户端使用，从而保证资源不被浪费\n"),s("strong",[t._v("SQL Interface–>SQL接口")]),t._v("： 作用是用来接收SQL指令并返回查询结果\n"),s("strong",[t._v("Parser–>解析器")]),t._v("： 用来解析SQL接口中的SQL，分为语法解析和语义解析。解析后会生成一个语法树，该语法树可用于后续的查询优化。解析器将SQL语句“肢解”为关键字、表名、字段名等内容\n"),s("strong",[t._v("Optimlzer–>优化器：")]),t._v(" 核心组件，对SQL进行优化：分为逻辑上的优化和物理上的优化。物理优化—使用索引\n"),s("strong",[t._v("Cache & Buffers–>查询缓存:")]),t._v(" 在8.0中已经弃用。以key - value的方式缓存查询结果，查询结果作为value，SQL语句作为key。当下一次查询和缓存的查询语句完全一致时查询命中\n"),s("strong",[t._v("pluggable Storage Engines–>插件式存储引擎：")]),t._v(" 与底层的文件系统进行交互\n"),s("strong",[t._v("File system–>文件系统")]),t._v(" "),s("strong",[t._v("File & Logs–>日志文件")])]),t._v(" "),s("p",[s("strong",[t._v("5.7查询顺序：")]),t._v(" Connectors–>Connection Pool (连接池)–>SQL Interface(SQL接口)–>Cache & Buffers(查询缓存)–>Parser(解析器)–>Optimlzer(优化器)–>pluggable Storage Engines(插件式"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("存储引擎"),s("OutboundLink")],1),t._v(")–>File system(文件系统)–>Cache & Buffers(查询缓存)–>SQL Interface(SQL接口)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/sql%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg",alt:"sql执行流程.jpg"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027140822.png",alt:"image.png"}})]),t._v(" "),s("h3",{attrs:{id:"q-mysql的架构是怎样的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-mysql的架构是怎样的"}},[t._v("#")]),t._v(" q: mysql的架构是怎样的？")]),t._v(" "),s("p",[t._v("接下来的MysQL Server结构可以分为"),s("strong",[t._v("如下的三层:")]),t._v("\n一、连接层\n二、服务层\n三、引擎层")]),t._v(" "),s("h4",{attrs:{id:"连接层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#连接层"}},[t._v("#")]),t._v(" 连接层")]),t._v(" "),s("p",[t._v("系统（客户端）访问 MySQL 服务器前，做的第一件事就是建立 TCP 连接。\n经过三次握手建立连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做身份认证、权限获取。")]),t._v(" "),s("ul",[s("li",[t._v("用户名或密码不对，会收到一个Access denied for user错误，客户端程序结束执行")]),t._v(" "),s("li",[t._v("用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依赖于此时读到的权限")])]),t._v(" "),s("p",[t._v("TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/image-20220615142301226.png",alt:"image-20220615142301226.png"}})]),t._v(" "),s("h4",{attrs:{id:"服务层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务层"}},[t._v("#")]),t._v(" 服务层")]),t._v(" "),s("p",[t._v("SQL Interface: SQL接口")]),t._v(" "),s("ul",[s("li",[t._v("接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT … FROM就是调用SQL Interface")]),t._v(" "),s("li",[t._v("MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定义函数等多种SQL语言接口")])]),t._v(" "),s("p",[t._v("Parser: 解析器")]),t._v(" "),s("ul",[s("li",[t._v("在解析器中对 SQL 语句进行"),s("a",{attrs:{href:"https://so.csdn.net/so/search?q=%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"}},[t._v("语法分析"),s("OutboundLink")],1),t._v("、语义分析。将SQL语句分解成数据结构，并将这个结构传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错误，那么就说明这个SQL语句是不合理的。")]),t._v(" "),s("li",[t._v("在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建语法树 ，并根据数据字典丰富查询语法树，会验证该客户端是否具有执行该查询的权限。创建好语法树后，MySQL还会对SQl查询进行语法上的优化，进行查询重写。")])]),t._v(" "),s("p",[t._v("Optimizer: 查询优化器")]),t._v(" "),s("ul",[s("li",[t._v("SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个执行计划。")]),t._v(" "),s("li",[t._v("这个执行计划表明应该使用哪些索引进行查询（全表检索还是使用索引检索），表之间的连接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。")]),t._v(" "),s("li",[t._v("它使用“ 选取-投影-连接 ”策略进行查询。例如：")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" student "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" gender "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'女'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("这个SELECT查询先根据WHERE语句进行 选取 ，而不是将表全部查询出来以后再进行gender过滤。 这个SELECT查询先根据id和name进行属性投影 ，而不是将属性全部取出以后再进行过滤，将这两个查询条件 连接 起来生成最终查询结果。")])]),t._v(" "),s("p",[t._v("Caches & Buffers： 查询缓存组件")]),t._v(" "),s("ul",[s("li",[t._v("MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过 程了，直接将结果反馈给客户端。")]),t._v(" "),s("li",[t._v("这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等 。")]),t._v(" "),s("li",[t._v("这个查询缓存可以在不同客户端之间共享 。")]),t._v(" "),s("li",[t._v("从MySQL 5.7.20开始，不推荐使用查询缓存，并在 MySQL 8.0中删除 。")])]),t._v(" "),s("h4",{attrs:{id:"引擎层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引擎层"}},[t._v("#")]),t._v(" 引擎层")]),t._v(" "),s("p",[t._v("插件式存储引擎层（ Storage Engines），真正的负责了MySQL中数据的存储和提取，对物理服务器级别维护的底层数据执行操作， 服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。\nMySQL 8.0.25默认支持的存储引擎如下：\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027140852.png",alt:"image.png"}})]),t._v(" "),s("h3",{attrs:{id:"q-为什么要有数据库缓冲池-buffer-pool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-为什么要有数据库缓冲池-buffer-pool"}},[t._v("#")]),t._v(" q: 为什么要有数据库缓冲池(buffer pool)？")]),t._v(" "),s("p",[t._v("InnoDB 存储引擎是以页为单位来管理存储空间的，我们进行的增删改查操作其实本质上都是在访问页面（包括读页面、写页面、创建新页面等操作）。而磁盘 I/O 需要消耗的时间很多，而在内存中进行操作，效率则会高很多，为了能让数据表或者索引中的数据随时被我们所用，DBMS 会申请 占用内存来作为数据缓冲池 ，在真正访问页面之前，需要把在磁盘上的页缓存到内存中的 Buffer Pool 之后才可以访问。\n这样做的好处是可以让磁盘活动最小化，从而"),s("strong",[t._v("减少与磁盘直接进行 I/O 的时间")]),t._v(" 。要知道，这种策略对提升 SQL 语句的查询性能来说至关重要。如果索引的数据在缓冲池里，那么访问的成本就会降低很多。")]),t._v(" "),s("blockquote",[s("p",[t._v("缓冲池和查询缓存是一个东西吗？不是。")])]),t._v(" "),s("p",[t._v("首先我们需要了解在 InnoDB 存储引擎中，缓冲池都包括了哪些。\n在 InnoDB 存储引擎中有一部分数据会放到内存中，缓冲池则占了这部分内存的大部分，它用来存储各种数据的缓存，如下图所示：\n"),s("img",{attrs:{src:"https://obs-knowledge.oss-cn-beijing.aliyuncs.com/img/20231027140908.png",alt:"image.png"}})]),t._v(" "),s("p",[t._v("从图中，你能看到 InnoDB 缓冲池包括了数据页、索引页、插入缓冲、锁信息、自适应 Hash 和数据字典信息等。\n"),s("strong",[t._v("缓存池的重要性：")]),t._v('\n对于使用InnoDB作为存储引擎的表来说，不管是用于存储用户数据的索引(包括聚簇索引和二级索引)，还是各种系统数据，都是以页的形式存放在表空间中的，而所谓的表空间只不过是InnoDB对文件系统上一个或几个实际文件的抽象，也就是说我们的数据说到底还是存储在磁盘上的。但是各位也都知道，磁盘的速度慢的跟乌龟一样，怎么能配得上"快如风，疾如电"的CPU呢?这里，缓冲池可以帮助我们消除CPU和磁盘之间的鸿沟。所以InnoDB存储引擎在处理客户端的请求时，当需要访问某个页的数据时，就会把完整的页的数据全部加载到内存中,也就是说即使我们只需要访问一个页的一条记录，那也需要先把整个页的数据加载到内存中。将整个页加载到内存中后就可以进行读写访问了，在进行完读写访问之后并不着急把该页对应的内存空间释放掉，而是将其缓存起来，这样将来有请求再次访问该页面时，就可以省去磁盘IO的开销了。')]),t._v(" "),s("p",[s("strong",[t._v("缓存原则：")]),t._v("\n“ 位置 * 频次 ”这个原则，可以帮我们对 I/O 访问效率进行优化。\n首先，位置决定效率，提供缓冲池就是为了在内存中可以直接访问数据。\n其次，频次决定优先级顺序。因为缓冲池的大小是有限的，比如磁盘有 200G，但是内存只有 16G，缓冲池大小只有 1G，就无法将所有数据都加载到缓冲池里，这时就涉及到优先级顺序，会 优先对使用频次高的热数据进行加载 。\n"),s("strong",[t._v("缓冲池的预读特性：")]),t._v('\n了解了缓冲池的作用之后，我们还需要了解缓冲池的另一个特性:预读。\n缓冲池的作用就是提升IO效率，而我们进行读取数据的时候存在一个"“局部性原理”，也就是说我们使用了一些数据，大概率还会使用它周周的一些数据，因此采用“预读”的机制提前加载，可以减少未来可能的磁盘I/O操作。')]),t._v(" "),s("h2",{attrs:{id:"q-mysql都有哪些引擎"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-mysql都有哪些引擎"}},[t._v("#")]),t._v(" q: MySQL都有哪些引擎？")]),t._v(" "),s("p",[s("strong",[t._v("InnoDB")])]),t._v(" "),s("p",[t._v("InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("DML 操作遵循 ACID 模型，支持"),s("strong",[t._v("事务")])]),t._v(" "),s("li",[s("strong",[t._v("行级锁")]),t._v("，提高并发访问性能")]),t._v(" "),s("li",[t._v("支持"),s("strong",[t._v("外键")]),t._v("约束，保证数据的完整性和正确性")])]),t._v(" "),s("p",[t._v("文件：")]),t._v(" "),s("ul",[s("li",[t._v("xxx.ibd: xxx代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。")])]),t._v(" "),s("p",[s("strong",[t._v("MyISAM")])]),t._v(" "),s("p",[t._v("MyISAM 是 MySQL 早期的默认存储引擎。")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("不支持事务，不支持外键")]),t._v(" "),s("li",[t._v("支持表锁，不支持行锁")]),t._v(" "),s("li",[t._v("访问速度快")])]),t._v(" "),s("p",[t._v("文件：")]),t._v(" "),s("ul",[s("li",[t._v("xxx.sdi: 存储表结构信息")]),t._v(" "),s("li",[t._v("xxx.MYD: 存储数据")]),t._v(" "),s("li",[t._v("xxx.MYI: 存储索引")])]),t._v(" "),s("p",[s("strong",[t._v("Memory")])]),t._v(" "),s("p",[t._v("Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。")]),t._v(" "),s("p",[t._v("特点：")]),t._v(" "),s("ul",[s("li",[t._v("存放在内存中，速度快")]),t._v(" "),s("li",[t._v("hash索引（默认）")])]),t._v(" "),s("p",[t._v("文件：")]),t._v(" "),s("ul",[s("li",[t._v("xxx.sdi: 存储表结构信息")])]),t._v(" "),s("p",[t._v("存储引擎特点")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("特点")]),t._v(" "),s("th",[t._v("InnoDB")]),t._v(" "),s("th",[t._v("MyISAM")]),t._v(" "),s("th",[t._v("Memory")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("存储限制")]),t._v(" "),s("td",[t._v("64TB")]),t._v(" "),s("td",[t._v("有")]),t._v(" "),s("td",[t._v("有")])]),t._v(" "),s("tr",[s("td",[t._v("事务安全")]),t._v(" "),s("td",[t._v("支持")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")])]),t._v(" "),s("tr",[s("td",[t._v("锁机制")]),t._v(" "),s("td",[t._v("行锁")]),t._v(" "),s("td",[t._v("表锁")]),t._v(" "),s("td",[t._v("表锁")])]),t._v(" "),s("tr",[s("td",[t._v("B+tree索引")]),t._v(" "),s("td",[t._v("支持")]),t._v(" "),s("td",[t._v("支持")]),t._v(" "),s("td",[t._v("支持")])]),t._v(" "),s("tr",[s("td",[t._v("Hash索引")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("支持")])]),t._v(" "),s("tr",[s("td",[t._v("全文索引")]),t._v(" "),s("td",[t._v("支持（5.6版本之后）")]),t._v(" "),s("td",[t._v("支持")]),t._v(" "),s("td",[t._v("-")])]),t._v(" "),s("tr",[s("td",[t._v("空间使用")]),t._v(" "),s("td",[t._v("高")]),t._v(" "),s("td",[t._v("低")]),t._v(" "),s("td",[t._v("N/A")])]),t._v(" "),s("tr",[s("td",[t._v("内存使用")]),t._v(" "),s("td",[t._v("高")]),t._v(" "),s("td",[t._v("低")]),t._v(" "),s("td",[t._v("中等")])]),t._v(" "),s("tr",[s("td",[t._v("批量插入速度")]),t._v(" "),s("td",[t._v("低")]),t._v(" "),s("td",[t._v("高")]),t._v(" "),s("td",[t._v("高")])]),t._v(" "),s("tr",[s("td",[t._v("支持外键")]),t._v(" "),s("td",[t._v("支持")]),t._v(" "),s("td",[t._v("-")]),t._v(" "),s("td",[t._v("-")])])])]),t._v(" "),s("p",[t._v("存储引擎的选择")]),t._v(" "),s("p",[t._v("在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。")]),t._v(" "),s("ul",[s("li",[t._v("InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择")]),t._v(" "),s("li",[t._v("MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。")]),t._v(" "),s("li",[t._v("Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性")])]),t._v(" "),s("p",[t._v("eg.电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。")]),t._v(" "),s("h2",{attrs:{id:"q-innodb存储引擎的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#q-innodb存储引擎的特点"}},[t._v("#")]),t._v(" q: innodb存储引擎的特点")]),t._v(" "),s("ul",[s("li",[t._v("InnoDB 引擎具备==外键==支持功能的事务存储引擎（InnoDB的优点一）")]),t._v(" "),s("li",[t._v("MySQL从3.23.34a开始就包含InnoDB存储引擎。 大于等于5.5之后，==默认==采用InnoDB引擎 。")]),t._v(" "),s("li",[t._v("InnoDB是MySQL的"),s("strong",[t._v("默认==事务==型引擎")]),t._v("，它被设计用来处理大量的短期(short-lived)事务。可以确保事务的完整提交(Commit)和回滚(Rollback)（InnoDB的优点二）")]),t._v(" "),s("li",[t._v("除了增加和查询外（MyISAM擅长增加和查询）,还需要更新、删除操作，那么，应优先选择InnoDB存储引擎。")]),t._v(" "),s("li",[s("strong",[t._v("除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。")])]),t._v(" "),s("li",[t._v("数据文件结构：（在《第02章_MySQL数据目录》章节已讲）\n表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）\n表名.ibd 存储数据和索引")]),t._v(" "),s("li",[t._v("InnoDB是 为处理巨大数据量的最大性能而设计 （InnoDB的优点三）")]),t._v(" "),s("li",[t._v("在以前的版本中，字典数据以元数据文件、非事务表等来存储。现在这些元数据文件被删除了。比如： .frm ， .par ， .trn ，.isl ， .db.opt 等都在MySQL8.0中不存在了。")]),t._v(" "),s("li",[t._v("对于并发量大的情况和数据量大的情况，InnoDB性能表现较好。InnoDB支持行级锁，行级锁粒度低，更适合于高并发的场景（InnoDB的优点四）\n"),s("strong",[t._v("InnoDB的缺点：")])]),t._v(" "),s("li",[t._v("对比MyISAM的存储引擎， InnoDB写的处理效率差一些 ，并且会占用更多的磁盘空间以保存数据和索引（InnoDB缺点）。")]),t._v(" "),s("li",[t._v("MyISAM只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据， 对内存要求较高 ，而且内存大小对性能有决定性的影响。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);